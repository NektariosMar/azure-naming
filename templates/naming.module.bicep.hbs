/**
 * Azure naming module - helps maintaining a consistent naming convention
 * Licensed to use under the MIT license.
 * ----------------------------------------------------------------------------
 * Module repository & documentation: https://github.com/nianton/azure-naming
 * Starter repository template:       https://github.com/nianton/bicep-starter
 * ----------------------------------------------------------------------------
 * Microsoft naming convention best practices (supports user-defined types and compile time imports)
 * https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming
 * ----------------------------------------------------------------------------
 * Generated/built on: {{_metadata.timestamp}}
 */

metadata name = 'Azure Naming module'
metadata description = 'Module to maintain a consistent naming of Azure resources.'
metadata owner = 'https://github.com/nianton'

@description('Optional. It is not recommended that you use prefix by azure you should be using a suffix for your resources.')
param prefix array = []

@description('Optional. It is recommended that you specify a suffix for consistency. Please use only lowercase characters when possible.')
param suffix array = []

@description('Optional. Custom seed value for the unique string to be created -defaults to resourceGroup Id.')
param uniqueSeed string = resourceGroup().id

@description('Optional. Max length of the uniqueness suffix to be added -defaults to 4')
param uniqueLength int = 4

@description('Optional. Use dashes as separator where applicable -defaults to true')
param useDashes bool = true

@description('Optional. Create names using lowercase letters -defaults to true')
param useLowerCase bool = true

@description('Optional. Used when region abbreviation is needed (placeholder value is "**location**)')
param location string = resourceGroup().location

var uniquePart = substring(uniqueString(uniqueSeed), 0, uniqueLength)
var delimiter = useDashes ? '-' : ''
var locationPlaceholder = '**location**'
var regionAbbreviations = {
  {{#each regionAbbreviations}}
    {{@key}}: '{{this}}'
  {{/each}}
}

var strPrefixJoined = empty(prefix) ? '' : '${replace(replace(replace(string(prefix), '["', ''), '"]', ''), '","', delimiter)}${delimiter}'
var strPrefixInterim = useLowerCase ? toLower(strPrefixJoined) : strPrefixJoined
var strPrefix = replace(strPrefixInterim, locationPlaceholder, regionAbbreviations[location])

var strSuffixJoined =  empty(suffix) ? '' : '${delimiter}${replace(replace(replace(string(suffix), '["', ''), '"]', ''), '","', delimiter)}'
var strSuffixInterim = useLowerCase ? toLower(strSuffixJoined) : strSuffixJoined
var strSuffix = replace(strSuffixInterim, locationPlaceholder, regionAbbreviations[location])

var placeholder = '[****]'
var nameTemplate = '${strPrefix}${placeholder}${strSuffix}'
var nameUniqueTemplate = '${strPrefix}${placeholder}${strSuffix}${delimiter}${uniquePart}'
var nameSafeTemplate = toLower(replace(nameTemplate, delimiter, ''))
var nameUniqueSafeTemplate = toLower(replace(nameUniqueTemplate, delimiter, ''))

var d = delimiter
var ph = placeholder
var nt = nameTemplate
var nut = nameUniqueTemplate
var nst = nameSafeTemplate
var nust = nameUniqueSafeTemplate

var names = {
{{#each definitions}}
  {{name}}: { 
    {{#if dashes}}
    name: endsWith(take(replace(nt, ph, '{{slug}}'), {{length.max}}), d) ? take(replace(nt, ph, '{{slug}}'), {{length.max}}-1) : take(replace(nt, ph, '{{slug}}'), {{length.max}})
    nameUnique: endsWith(take(replace(nut, ph, '{{slug}}'), {{length.max}}), d) ? take(replace(nut, ph, '{{slug}}'), {{length.max}}-1) : take(replace(nut, ph, '{{slug}}'), {{length.max}})
    slug: '{{slug}}'
    {{else}}
    name: take(replace(nst, ph, '{{slug}}'), {{length.max}})
    nameUnique: take(replace(nust, ph, '{{slug}}'), {{length.max}})
    slug: '{{slug}}'
    {{/if}}    
  }
{{/each}}
}

output names NamingOutput = names
output regionAbbreviations object = regionAbbreviations

// ================== //
//  Type Definitions  //
// ================== //

@export()
type ServiceNameType = {
  name: string
  nameUnique: string
  slug: string
}

@export()
type NamingOutput = {
  {{#each definitions}}
  {{name}}: ServiceNameType
  {{/each}}
}